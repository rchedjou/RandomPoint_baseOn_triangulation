#!/usr/bin/python3.8
#export XDG_RUNTIME_DIR=/tmp/runtime-root
# -*-coding:Utf-8 -*
from matplotlib import pyplot as plt
import random as rd
from os import getcwd, chdir, mkdir
import csv
import numpy.random as nr
from pylab import * 
import math
import os as os

# functions

# this function give the area of a polygon
def polygon_area (listpoint):
	n = len(listpoint)
	area = 0.0
	im1 = n - 1
	for i in range ( 0, n ):

		area = area + listpoint[im1][0] * listpoint[i][1] - listpoint[i][0] * listpoint[im1][1]
		im1 = i
	area = 0.5 * area
	return math.fabs(area)

# this function give the area of a Triangle
def triangle_area ( pointtriangle):
	import math
	value = 0.5 * ( (pointtriangle[1][0] - pointtriangle[0][0] ) * ( pointtriangle[2][1] - pointtriangle[0][1] ) - ( pointtriangle[2][0] - pointtriangle[0][0] ) * ( pointtriangle[1][1] - pointtriangle[0][1] ) )
	return math.fabs(value)

#this function give the distance between two points
def dist_2point(pt1, pt2):
	import math
	dist = (pt1[0]-pt2[0])**2 + (pt1[1] - pt2[1])**2
	return math.sqrt(dist)

#this function give the square distance between two points
def square_dist_2point(pt1, pt2):
	return (pt1[0]-pt2[0])**2 + (pt1[1] - pt2[1])**2
	
#this function give the closest neignbor of a point
def closest_point(points, target):
	tx, ty = target
	return min(points, key=lambda p: (p[0] - tx)**2 + (p[1] - ty)**2)

def closest_square_distance(points, target):
	tx, ty = target
	dist_min = 0
	liste_dist = []
	for p in points:
		liste_dist.append((p[0] - tx)**2 + (p[1] - ty)**2)
	return min(liste_dist) 
	# return square_dist_2point(target, min(points, key=lambda p: (p[0] - tx)**2 + (p[1] - ty)**2))

#this function gives the farest point in a triangle
def farest_point(points, target):
	tx, ty = target
	return max(points, key=lambda p: (p[0] - tx)**2 + (p[1] - ty)**2)

# this function Return list of k points chosen uniformly at random inside triangles.
def random_points_in_triangle_with_minimal_distance(listTrianles, k, homogeneity,d):
   
	listofPoints = []
	totalArea = 0
	for tri in listTrianles :
		totalArea = totalArea + triangle_area(tri)

	print("totalArea = ",totalArea)
	countp = 0
	numt = 0
	c=0
	nbPoint = 0
	listeDistMinTri = []
	listeDistMaxTri = []
	listePointTri = {}
	#here we browse each triangle to generate the points
	for t in listTrianles:
		num = round((k* triangle_area(t)/totalArea))
		numt = numt + num

		i=0
		listePointTri[c] = []
		respectProximity=True
		while((i < num and respectProximity) or (i < num and not respectProximity)):
		   
			# r1,r2 = [nr.uniform(0.0,1.0) for _ in range(2)]  
			r1 = rd.random()
			r2 = rd.random()
			if r1+r2 > 1:
				r1 = 1-r1
				r2 = 1-r2

			x = (1-r1-r2)*t[0][0] + r1*t[1][0] + r2*t[2][0]
			y = (1-r1-r2)*t[0][1] + r1*t[1][1] + r2*t[2][1]
			#the new point generate
			point= (x,y)
			distMin=0
			#this part put in listePointTri[c] points for each triangle and reccord the minimal an maximal distance in a triangle
			if len(listePointTri[c]) > 0:
				distMin = closest_square_distance(listePointTri[c],point)
				if(distMin>=d**2):
					# print("distmin = {0}, d= {1}".format(distMin,d))
					print("{0}=>{1}".format(nbPoint+1,point))
					respectProximity=False
					i+=1
					nbPoint+=1
					listePointTri[c].append(point)
					listofPoints.append(point)
				# if len(listePointTri[c])==num:
				# 	print("liste {0} et dist min = {1}".format(listePointTri[c],distMin))
				# pointMin = closest_point(listePointTri[c],point)
				# distMin = dist_2point(point,pointMin)
			else  :
			# if len(listePointTri[c]) == 0: 
				listePointTri[c].append(point)
				listofPoints.append(point) 
				# print("{0}=>{1}".format(nbPoint+1,point))
				respectProximity=False
				i+=1
				nbPoint+=1
   
			

		c +=1
	print('generated number point = ',nbPoint)  
	return listofPoints,listePointTri

#this function ramdom points in polygon whithout distance constrain
def random_points_in_triangle(listTrianles, k, homogeneity):
	# nr.seed(30)
	# rd.seed(12)
	"Return list of k points chosen uniformly at random inside the polygon."
	#totalArea = polygon_area(list)
	listofPoints = []
	totalArea = 0
	for tri in listTrianles :
		totalArea = totalArea + triangle_area(tri)
	# print(polygon_area(list))
	print("totalArea = ",totalArea)
	countp = 0
	numt = 0
	c=0
	np=0
	listeDistMinTri = []
	listeDistMaxTri = []
	valdistmin = 1000000000000000
	valdistmax = 0.0
	listePointTri = {}
	row_csvlist = []
	# row_csvlist.append(["IdTri", "NombrePointTri","SommetsTri","distMin","distMax"])
	row_csvlist.append(["IdPoint","CoordPoint"])
	#here we browse each triangle to generate the points
	for t in listTrianles:
		valdistmin = 1000000000000000
		valdistmax = 0.0
		num = round((k* triangle_area(t)/totalArea))
		numt = numt + num

		i=0
		while i < num:
			r1 = rd.random()
			r2 = rd.random()
			# r1,r2 = [nr.uniform(0.0,1.0) for _ in range(2)]
			
			s1 = math.sqrt(r1)

			if r1+r2 > 1:
				r1 = 1-r1
				r2 = 1-r2
				s1 = math.sqrt(r1)

			if homogeneity==False : 
				x = t[0][0] * (1.0 - s1) + t[1][0] * (1.0 - r2) * s1 + t[2][0] * r2 * s1
				y = t[0][1] * (1.0 - s1) + t[1][1] * (1.0 - r2) * s1 + t[2][1] * r2 * s1
			else :
				x = (1-r1-r2)*t[0][0] + r1*t[1][0] + r2*t[2][0]
				y = (1-r1-r2)*t[0][1] + r1*t[1][1] + r2*t[2][1]
			#the new point generate
			point= (x,y)
			np+=1
			# row_csvlist.append([np,point])
			if i==0 :
			   listePointTri[c] = []
			listofPoints.append(point)
			i+=1
		
		# listeDistMaxTri.append(valdistmax)      
		
		c +=1
	print('num total = ',numt)
	return listofPoints, listeDistMinTri,listePointTri



def lire_fichier_triangulation(nom_fichier):
	fichier = open(nom_fichier, 'rt')
	texte = fichier.readlines()
	print(texte)

#these function take a list of point of a polygon and return the liste of triangles after triangulation
def triangulation(list_point_polygon, region_name):
	formatage_fichier_coordonne_triangulation(list_point_polygon, region_name)
	commande = "triangle/triangle -pq "+region_name
	os.system(commande)
	liste_triangle = liste_triangle_triangulation(region_name)
	return liste_triangle

# show triangulation
def show_triangulation(region_name):
	commande = "triangle/showme "+region_name+".poly &"
	os.system(commande)

def formatage_fichier_coordonne_triangulation(list_point, nom_fichier):
	nom_fichier = "{0}.poly".format(nom_fichier)
	fichier = open(nom_fichier, 'wt')
	text = "{0}\t2\t0\t0".format(len(list_point))
	fichier.write(text)
	i = 1
	#plaçon les coordonné x,y dans le fichier
	for point in list_point:
		chaine = "\n{0}\t{1}\t{2}".format(i,point[0],point[1])
		fichier.write(chaine)
		i+=1
	i=1
	#défissons mes segment du ploygonne en question
	text = "\n{0}\t0".format(len(list_point))
	fichier.write(text)
	text = "\n{0}\t{1}\t{2}".format(i,len(list_point),i)
	fichier.write(text)
	while i < len(list_point):
		chaine1 = "\n{0}\t{1}\t{2}".format(i+1,i,i+1)
		fichier.write(chaine1)
		i+=1
	fichier.write('\n0')
	fichier.close()
 
def liste_triangle_triangulation(nom_fichier):
	nom_fichier1 = "{0}.1.node".format(nom_fichier)
	nom_fichier2 = "{0}.1.ele".format(nom_fichier)
	fichiernode = open(nom_fichier1, 'rt')
	fichierele = open(nom_fichier2, 'rt')
	node = fichiernode.readlines()
	ele = fichierele.readlines()
	info1 = node[0].split('  ')
	info2 = ele[0].split('  ')
	nombrepointtri = int(info1[0])
	nombretriangle = int(info2[0])
	listepointtri = []
	listTri = []
	node.pop(0)
	node.pop(len(node)-1)
	ele.pop(0)
	ele.pop(len(ele)-1)
	#print(node)
	#exit('fin')
	for chaine in node:
		elts = chaine.split()
		#coord = elts[1].split('  ')
		#print(elts)
		listepointtri.append((float(elts[1]),float(elts[2])))
	
	for cord in ele:
		elt = cord.split()
		#listsom = elt[1].split('   ')
		#print(elt)
		#exit('fin')
		a,b,c = int(elt[1]),int(elt[2]),int(elt[3])
		listTri.append([listepointtri[a-1],listepointtri[b-1],listepointtri[c-1]])

	return listTri


#MAIN

#random_points_in_triangle_with_minimal_distance  is the name of yhe function that generate
#change 5000 in the function to set another number of points to generate
#the variable d is de distance

polyHomme = [(4.51127359229802,0.00080802324662),(4.51130539664448,0.000800780960583),(4.511319784330162,0.000793157480023),(4.511336065134813,0.000782484602563),(4.511348559711375,0.000769143496728),(4.511359918418566,0.000755802389248),(4.511365597780832,0.0007405554013),(4.511362947481468,0.000675755674887),(4.511353860541289,0.000659746323114),(4.51134704533381,0.000650216945987),(4.511333793535521,0.000638400514371),(4.511321298982822,0.000627346433489),(4.511314483771048,0.000622772329753),(4.511314483789453,0.000600664190202),(4.511322056264827,0.000583892504228),(4.511338337070338,0.000568264349213),(4.51134780265471,0.000559497335373),(4.511375063526776,0.000549205635417),(4.511400809908573,0.000537008059234),(4.511436021870421,0.00052404813927),(4.511460253757828,0.000516805833753),(4.511493572606281,0.000503845910428),(4.511510989277126,0.000497747123762),(4.511523105224795,0.00048974245856),(4.511532192190663,0.000476020167064),(4.511541279156629,0.000461916700284),(4.511538628826625,0.000407027507566),(4.511538628855164,0.0003517571416),(4.511546958580414,0.000319738450507),(4.511554152432912,0.000292293857578),(4.511560589040457,0.00025798811474),(4.511584442316172,0.000219489452088),(4.511609431463119,0.000169555537939),(4.51161548944132,0.000139823891063),(4.511624197781472,0.000107805194196),(4.511634420613201,0.000077311196671),(4.511651837286858,0.000026614923898),(4.511659409752696,-0.000005784950926),(4.511666982217425,-0.00003322955136),(4.511679098159682,-0.000070584703047),(4.511690078232606,-0.000091549330069),(4.511695378956805,-0.000105271631463),(4.511695378953828,-0.000124330382468),(4.511695378948513,-0.000152537333957),(4.511687806482199,-0.000155205557477),(4.511683263003816,-0.000150250281325),(4.511685156117641,-0.000162447882189),(4.511675690535677,-0.000162066705059),(4.511668118071449,-0.000155967903273),(4.511663574595308,-0.000140339727157),(4.511660545611819,-0.0001254739015),(4.511658652496969,-0.000116325701153),(4.511651458656257,-0.000107177500071),(4.511653730388081,-0.0001513938002),(4.511647293791838,-0.000154824373809),(4.511639721326907,-0.000153299672228),(4.511633663356314,-0.000145676171194),(4.511632527491654,-0.000117088046936),(4.511624576406785,-0.000092692846747),(4.511618897060058,-0.000074777621965),(4.511609431479682,-0.00006639177154),(4.511600344521965,-0.000065248245798),(4.511596558288431,-0.00007706466947),(4.511594286546909,-0.000094979892676),(4.511591257559618,-0.000105271616344),(4.511585578210384,-0.00011022689003),(4.511572705020598,-0.000110226888073),(4.511565132556851,-0.00010527161255),(4.511565511183163,-0.000080876415688),(4.511570433286584,-0.00006562941806),(4.511571190534993,-0.000037803646427),(4.511579898869958,-0.000018363723952),(4.511590121697412,-0.000007690825197),(4.511592772060101,-0.0000012108508),(4.511592772059805,0.000020897297237),(4.511570433286764,0.000063588891489),(4.511548094513046,0.000098275809313),(4.511528027478733,0.00012648275157),(4.511487136163655,0.000176797832638),(4.511462147019604,0.000229399962397),(4.511453060056398,0.000251508103299),(4.511444730339241,0.000272853894156),(4.511437536494628,0.000285051487754),(4.511429964037183,0.000270185664434),(4.511429585420532,0.000251889270035),(4.511431099925216,0.000213771782445),(4.511437536526392,0.000185946017771),(4.511442837258775,0.000150115579722),(4.511451545597053,0.000119621590172),(4.511464418788834,0.000090652299996),(4.511472748503147,0.000039193689125),(4.511478427851348,0.000026233742626),(4.511483728575983,-0.000021794295695),(4.511489029299382,-0.000046189490198),(4.51148902928843,-0.000135003244606),(4.511481835441169,-0.000168165460248),(4.511471233979919,-0.00021543114567),(4.511464797377957,-0.000241351036881),(4.511460253897267,-0.000249355708195),(4.511465175975225,-0.000310343693741),(4.511467826315188,-0.000359134082136),(4.5114806994787,-0.000406018602104),(4.511486000182303,-0.000442230221525),(4.511484485665654,-0.000480347711524),(4.511479184921121,-0.000510079350715),(4.511468583441371,-0.000552770932153),(4.51145419572268,-0.000601561307526),(4.511442836991663,-0.000644252885482),(4.511440565233004,-0.000666361026859),(4.511444351430483,-0.0007029538196),(4.511442836909183,-0.000732304284456),(4.511455710075861,-0.000752887741741),(4.51147539846251,-0.000770421807793),(4.511491679243472,-0.000785287646702),(4.511495086839407,-0.000797104072752),(4.511490543355392,-0.000802440516531),(4.511480320524939,-0.000806633429193),(4.511474641177299,-0.000806633422874),(4.511461767987388,-0.000808539283037),(4.511449273422961,-0.000808539269102),(4.511441700959357,-0.000808920435543),(4.511434507118565,-0.000809682777282),(4.511429963639897,-0.000810445121968),(4.511420876691028,-0.000804346313797),(4.51141444010505,-0.000797485158953),(4.511412168353694,-0.00080892040259),(4.511399673788861,-0.000810063913242),(4.511381121262584,-0.000803583919978),(4.511368248085553,-0.00079519805905),(4.511361054258617,-0.000783762805829),(4.511358782532039,-0.000772327558079),(4.511357646685604,-0.000750219416002),(4.511354239106974,-0.000720868949737),(4.511348938408765,-0.000694567880647),(4.51135234603136,-0.000678939715482),(4.511365976477054,-0.000664073909218),(4.511369384088899,-0.000659880989003),(4.511369384143312,-0.000596224789268),(4.511345909554177,-0.000539429719343),(4.511336065374419,-0.000510079250016),(4.51133303641114,-0.000478060562198),(4.511335686793677,-0.000444898353649),(4.511341366157628,-0.000415166720084),(4.511345531015636,-0.000408305575418),(4.511346666901663,-0.000377049239443),(4.511334929599719,-0.000348079946213),(4.511324706790195,-0.000316823605636),(4.511319406086702,-0.000266889701581),(4.511309940517386,-0.000244019209048),(4.511300474959084,-0.000178457138116),(4.511272456864331,-0.000113657415601),(4.511269049261898,-0.0000728717119),(4.511267913396127,-0.000016457842072),(4.511251253981361,-0.00001798254084),(4.511249739486246,-0.000067535262957),(4.511247846366253,-0.000107177440401),(4.51123913803115,-0.000136527897191),(4.511223993103978,-0.000162447778853),(4.511215284770131,-0.00017921946668),(4.511198246708336,-0.000263077909387),(4.511189159750056,-0.000278324896248),(4.511187645241372,-0.000319110594254),(4.511178936902985,-0.000338931677346),(4.511173636172427,-0.000356465713174),(4.511162277472116,-0.000376286794059),(4.511161520208149,-0.000409830170734),(4.511171364390449,-0.000437655932655),(4.511172121619863,-0.000464719340007),(4.511172500224752,-0.000492545096648),(4.511167956732075,-0.000516559102357),(4.511159627010492,-0.000537904881773),(4.51113918132601,-0.000592794027387),(4.511135016420273,-0.000654925504234),(4.51113653090025,-0.000668266621022),(4.511150161313564,-0.000684275972392),(4.511149782664117,-0.000712101727561),(4.511144481930147,-0.000724299313729),(4.511141074293223,-0.00075403093916),(4.511136530802626,-0.000768134399306),(4.511138802524519,-0.000783381390812),(4.511130094182898,-0.000795197797811),(4.511110027147808,-0.000810444764292),(4.511096775340962,-0.000812731797708),(4.511087688393355,-0.000809301215215),(4.511082009056318,-0.000802440064318),(4.511076329712633,-0.000801677708642),(4.511072164853753,-0.000807395324422),(4.511063077900991,-0.000808920013052),(4.511053612328742,-0.000807395303758),(4.511044146754103,-0.000808157642571),(4.511032409443599,-0.000807395280142),(4.511021429381249,-0.000804727045252),(4.511015750041371,-0.00080091529232),(4.511007420336853,-0.000800915283116),(4.511006663105006,-0.000787955343908),(4.511024079778993,-0.000770040153484),(4.511041875071995,-0.000755936709357),(4.511051340660527,-0.000741452081332),(4.511058155888196,-0.00072696745027),(4.511056641433811,-0.000688087630956),(4.511059670457881,-0.000643490195586),(4.511049069058719,-0.000591650429656),(4.511034681423221,-0.000544384758495),(4.511024458643677,-0.000487589725384),(4.511022944173416,-0.000454046353709),(4.511025594552204,-0.000423552381933),(4.511029002171707,-0.000400300729071),(4.511042632627726,-0.000340837487001),(4.511049069240555,-0.000287854209468),(4.511050962371057,-0.000244400296553),(4.511030138132212,-0.000159779512719),(4.511032409886329,-0.000036660094316),(4.511052098275659,0.000084934628207),(4.511068000431348,0.000140586134846),(4.511075194256509,0.000190138846464),(4.51107784460966,0.000217583425229),(4.511075194232132,0.000268279658739),(4.511069514882527,0.000282001945514),(4.511058534820144,0.000272853748797),(4.511052476862408,0.000245790344089),(4.511036953329564,0.000220251635673),(4.511030138122865,0.000198143502723),(4.511023322914458,0.00018060946619),(4.511008556624605,0.000160788380243),(4.510987353745501,0.000137536722022),(4.510972208831936,0.000120002685715),(4.510961607393186,0.000102087476148),(4.510944569365779,0.0000757864246),(4.510917308520994,0.000029283119208),(4.510912007801124,0.000012511436232),(4.510912765046972,-0.000005403770359),(4.510933589305254,-0.00002674954921),(4.510934725173197,-0.000042377708678),(4.510938890021961,-0.00007935164729),(4.510940025888084,-0.000100316251676),(4.510937375526797,-0.000107558569119),(4.510926774085736,-0.000108320916778),(4.510918444382297,-0.000107939740922),(4.510912765040401,-0.000098410374861),(4.510910493305628,-0.000077445771144),(4.510907464323713,-0.000066010532646),(4.510898377374728,-0.000065629357217),(4.510885504196075,-0.000076683419286),(4.510878688982851,-0.000091168053011),(4.510876795866707,-0.000104890338002),(4.510872252385944,-0.000143007796076),(4.510865815795201,-0.000153680683156),(4.510855971601241,-0.000152537157332),(4.510853699866053,-0.000143007792415),(4.510852942623361,-0.000126617285448),(4.510851806757339,-0.000110989127611),(4.510845748789318,-0.000126236109618),(4.51084234118049,-0.000143770139318),(4.510835525966432,-0.000157873596982),(4.510826439017318,-0.000162447689761),(4.510820759675138,-0.000160922990247),(4.510819623808271,-0.000153299498803),(4.510806750632087,-0.00015329949608),(4.510807507881746,-0.000132716070364),(4.510807507883213,-0.000124330230192),(4.510809401001171,-0.000099172709936),(4.510831361130684,-0.000046570622859),(4.510854078502381,0.000025471370876),(4.510875281376675,0.000094463972212),(4.510893455263875,0.000155451910334),(4.510910114660925,0.000195094073057),(4.510925638190072,0.000226731570312),(4.510944190704131,0.000250364402873),(4.510954792124262,0.000306015902619),(4.51096690804057,0.000343752196805),(4.510968043888081,0.000386443756764),(4.510966150734005,0.000455436364995),(4.510971072820269,0.000473732750772),(4.510982810119865,0.000490123268197),(4.511011585451314,0.000506132623397),(4.511050583606451,0.000517567891059),(4.511101319073298,0.000532433740886),(4.511153569036837,0.000545393720261),(4.511179694017638,0.00055492310864),(4.511191052706319,0.00055759134062),(4.511191809939749,0.000573981855682),(4.511183480227214,0.000581605344106),(4.511165684936856,0.000592278222594),(4.511138045454656,0.000595708772555),(4.511113056334698,0.000598758149731),(4.511105483870659,0.000604094589416),(4.511103212127732,0.000610193382863),(4.511104347989982,0.000618198052715),(4.511110027331504,0.000622009804682),(4.511108891459315,0.000625821550825),(4.511099425879899,0.000631539163254),(4.511098290006028,0.000637256782857),(4.511103212100109,0.000642593233107),(4.511118357020485,0.000641449722382),(4.511097911374724,0.000646786150174),(4.511104726580583,0.000655553174574),(4.511102454838261,0.000660508443729),(4.511082766440474,0.000663938998071),(4.51107898020525,0.00067003778974),(4.511080494690481,0.000677280110379),(4.511106619652891,0.000701675316263),(4.511113056235192,0.000710442340913),(4.511111541739556,0.00071425408656),(4.511105483763998,0.0007222587495),(4.511109269979824,0.000736362217615),(4.511116463803056,0.000749703339972),(4.511122143134155,0.000763044461001),(4.511131608693384,0.000777910285188),(4.511145617732559,0.000788964367422),(4.511167577856333,0.00079887493463),(4.511189916606597,0.000806117279581),(4.511209983625146,0.00080802317572),(4.511208847755198,0.000808785523982),(4.511210740869118,0.00080992905039),(4.511210362249439,0.000806879651847),(4.511213012608602,0.00080878552862)]
print(polygon_area(polyHomme))
formatage_fichier_coordonne_triangulation(polyHomme, "files/HC")
triangles = triangulation(polyHomme, "homme")
d= 5.4759e-08
listepoint, lispointTri = random_points_in_triangle_with_minimal_distance(triangles,5000,True,d)

#PRINT THE RESULT
xx, yy = zip(*listepoint)
xs,ys = zip(*polyHomme)
plt.scatter(xx, yy, s=0.1, c='red',label='n = {0} et d={1}'.format(len(listepoint),d))
plt.plot(xs,ys) 
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()

plt.show()